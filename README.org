* leetcontract

| Project Stage                                                            | CI | Issues                                                               | Issue resolve time                                                         |
|--------------------------------------------------------------------------+----+----------------------------------------------------------------------+----------------------------------------------------------------------------|
| [[https://github.com/trontech-link/geek-contract/wiki][https://img.shields.io/badge/Project%20Stage-Development-yellowgreen.svg]] | [[https://github.com/trontech-link/geek-contract/actions][https://github.com/trontech-link/geek-contract/actions/workflows/blank.yml/badge.svg]]             | [[http://isitmaintained.com/project/trontech-link/geek-contract][http://isitmaintained.com/badge/open/trontech-link/geek-contract.svg]] | [[http://isitmaintained.com/project/trontech-link/geek-contract][http://isitmaintained.com/badge/resolution/trontech-link/geek-contract.svg]] |

* Project architecture

#+begin_src plantuml :file preview/arch.png :cmdline -charset UTF-8 :exports results
@startuml

skinparam componentStyle uml2

class Verifier {
        mapping(uint => address) registedQuestionList;
        mapping(uint => address) prizePool;
        mapping(uint => address) winner;
        
        bool verify(addr answer)
        void registQuestion(addr question)
        deposit(uint amount)
        withdraw(uint amount)
}

interface QuestionBase {
        byte32 description;
        address TestCaseBase;
}
interface TestCaseBase {
        mapping(uint => address) prizePool;
        mapping(uint => address) winner;
}

class TestCase
class Question

class Answer

TestCaseBase <|-- TestCase
QuestionBase <|-- Question
Question o-- TestCase

Answer }-- Question

Verifier *-- Question
Verifier *-- Answer
@enduml
#+end_src

#+RESULTS:
[[file:preview/arch.png]]

* User scenario
#+begin_src plantuml :file preview/user_scenario.png :cmdline -charset UTF-8 :exports results
@startuml
!include <cloudogu/common>
!include <cloudogu/dogus/jenkins>
!include <cloudogu/dogus/cloudogu>
!include <cloudogu/dogus/scm>
!include <cloudogu/dogus/smeagol>
!include <cloudogu/dogus/nexus>
!include <cloudogu/tools/k8s>

actor "管理员" as a
actor "出题人" as b
actor "答题人" as c

node "主控合约" as mc <<$cloudogu>> {
    TOOL_K8S(mwallet, "分题目奖池") #ffffff
}

DOGU_SCM(t, "测试用例合约") #ffffff
DOGU_SCM(q, "题目合约") #ffffff

a --> mc : "1. 创建全局奖池"
b --> t : "2. 创建测试用例合约"
b --> q : "3. 创建题目合约"
t --> q : "4. 题目合约关联测试用例"
b --> mc : "5. 发布题目,关联测试用例,奖励分成比例"
c --> mc : "6. 答题并存储tron币"
c --> mc : "7. 提交答案"
a --> mc : "8. 验证答案"
c --> mc : "9. 领取奖励"
@enduml
#+end_src

#+RESULTS:
[[file:preview/user_scenario.png]]
